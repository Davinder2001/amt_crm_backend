name: Deploy to Production

on:
  push:
    branches:
      - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_URL: ${{ secrets.APP_URL }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}

          MAIL_MAILER: ${{ secrets.MAIL_MAILER }}
          MAIL_SCHEME: ${{ secrets.MAIL_SCHEME }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_ADDRESS: ${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME: ${{ secrets.MAIL_FROM_NAME }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Copy only necessary files for production
          cp -r app deployment/
          cp -r bootstrap deployment/
          cp -r config deployment/
          cp -r database deployment/
          cp -r public deployment/
          cp -r resources deployment/
          cp -r routes deployment/
          cp -r storage deployment/
          cp -r docker deployment/
          
          # Copy individual files
          cp artisan deployment/
          cp composer.json deployment/
          cp composer.lock deployment/
          cp Dockerfile deployment/
          cp docker-compose.yml deployment/
          cp package.json deployment/
          cp package-lock.json deployment/
          cp vite.config.js deployment/
          cp docker-entrypoint.sh deployment/
          
          # Create .env.docker file from GitHub secrets
          cat > .env.docker << 'EOF'
# Application Configuration
APP_NAME="${{ secrets.APP_NAME }}"
APP_ENV="${{ secrets.APP_ENV }}"
APP_KEY="${{ secrets.APP_KEY }}"
APP_DEBUG="${{ secrets.APP_DEBUG }}"
APP_URL="${{ secrets.APP_URL }}"
APP_LOCALE="${{ secrets.APP_LOCALE }}"
APP_FALLBACK_LOCALE="${{ secrets.APP_FALLBACK_LOCALE }}"
APP_FAKER_LOCALE="${{ secrets.APP_FAKER_LOCALE }}"
APP_MAINTENANCE_DRIVER="${{ secrets.APP_MAINTENANCE_DRIVER }}"

# PHP Configuration
PHP_CLI_SERVER_WORKERS="${{ secrets.PHP_CLI_SERVER_WORKERS }}"
BCRYPT_ROUNDS="${{ secrets.BCRYPT_ROUNDS }}"

# Logging Configuration
LOG_CHANNEL="${{ secrets.LOG_CHANNEL }}"
LOG_STACK="${{ secrets.LOG_STACK }}"
LOG_DEPRECATIONS_CHANNEL="${{ secrets.LOG_DEPRECATIONS_CHANNEL }}"
LOG_LEVEL="${{ secrets.LOG_LEVEL }}"

# Database Configuration
DB_CONNECTION="${{ secrets.DB_CONNECTION }}"
DB_HOST="${{ secrets.DB_HOST }}"
DB_PORT="${{ secrets.DB_PORT }}"
DB_DATABASE="${{ secrets.DB_DATABASE }}"
DB_USERNAME="${{ secrets.DB_USERNAME }}"
DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
DB_ROOT_PASSWORD="${{ secrets.DB_ROOT_PASSWORD }}"
DB_CHARSET="${{ secrets.DB_CHARSET }}"
DB_COLLATION="${{ secrets.DB_COLLATION }}"

# Session Configuration
SESSION_DRIVER="${{ secrets.SESSION_DRIVER }}"
SESSION_LIFETIME="${{ secrets.SESSION_LIFETIME }}"
SESSION_ENCRYPT="${{ secrets.SESSION_ENCRYPT }}"
SESSION_PATH="${{ secrets.SESSION_PATH }}"
SESSION_SECURE_COOKIE="${{ secrets.SESSION_SECURE_COOKIE }}"
SESSION_HTTP_ONLY="${{ secrets.SESSION_HTTP_ONLY }}"
SESSION_TABLE="${{ secrets.SESSION_TABLE }}"

# Cache Configuration
CACHE_STORE="${{ secrets.CACHE_STORE }}"
DB_CACHE_TABLE="${{ secrets.DB_CACHE_TABLE }}"

# Queue Configuration
QUEUE_CONNECTION="${{ secrets.QUEUE_CONNECTION }}"
DB_QUEUE_TABLE="${{ secrets.DB_QUEUE_TABLE }}"

# Redis Configuration (Disabled)
# REDIS_CLIENT="${{ secrets.REDIS_CLIENT }}"
# REDIS_HOST="${{ secrets.REDIS_HOST }}"
# REDIS_PORT="${{ secrets.REDIS_PORT }}"
# REDIS_DB="${{ secrets.REDIS_DB }}"

# Broadcasting Configuration
BROADCAST_DRIVER="${{ secrets.BROADCAST_DRIVER }}"
BROADCAST_CONNECTION="${{ secrets.BROADCAST_CONNECTION }}"

# Mail Configuration
MAIL_MAILER="${{ secrets.MAIL_MAILER }}"
MAIL_SCHEME="${{ secrets.MAIL_SCHEME }}"
MAIL_HOST="${{ secrets.MAIL_HOST }}"
MAIL_PORT="${{ secrets.MAIL_PORT }}"
MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}"
MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
MAIL_FROM_ADDRESS="${{ secrets.MAIL_FROM_ADDRESS }}"
MAIL_FROM_NAME="${{ secrets.MAIL_FROM_NAME }}"

# AWS Configuration
AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}"
AWS_USE_PATH_STYLE_ENDPOINT="${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}"

# Filesystem Configuration
FILESYSTEM_DISK="${{ secrets.FILESYSTEM_DISK }}"

# Vite Configuration
VITE_APP_NAME="${{ secrets.VITE_APP_NAME }}"
EOF
          
          # Debug: Check the .env.docker file
          echo "=== .env.docker file contents ==="
          cat .env.docker
          echo "=== End of .env.docker file ==="
          
          # Debug: Check file encoding and line endings
          echo "=== File info ==="
          file .env.docker
          echo "=== Line count ==="
          wc -l .env.docker
          echo "=== Last few lines ==="
          tail -5 .env.docker | cat -A
          
          cp .env.docker deployment/
          
          # Create tar.gz for deployment
          tar -czf deployment.tar.gz -C deployment .

      - name: Copy files to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: root
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/srv/laravel-backend"
          overwrite: true

      - name: Deploy with SSH and Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: root
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd /srv/laravel-backend
            
            # Extract deployment package
            tar -xzf deployment.tar.gz
            
            # Copy environment file
            cp .env.docker .env
            
            # Debug: Check the .env file on server
            echo "=== .env file contents on server ==="
            cat .env
            echo "=== End of .env file ==="
            
            # Debug: Check file encoding and line endings on server
            echo "=== File info on server ==="
            file .env
            echo "=== Line count on server ==="
            wc -l .env
            echo "=== Last few lines on server ==="
            tail -5 .env | cat -A
            
            # Stop existing containers gracefully and remove them
            docker compose down --remove-orphans --volumes
            docker rm -f amt_crm_db amt_crm_app amt_crm_nginx 2>/dev/null || true
            
            # Build and start containers
            docker compose up --build -d
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            sleep 30
            
            # Wait for app container to be ready (entrypoint script will handle setup)
            echo "Waiting for application to be ready..."
            sleep 60
            
            # Check if app container is running
            if ! docker compose ps app | grep -q "Up"; then
              echo "❌ App container is not running. Checking logs..."
              docker compose logs app
              exit 1
            fi
            
            # Test the application
            echo "Testing application health..."
            sleep 10
            if curl -f http://localhost/api/health > /dev/null 2>&1; then
              echo "✅ Application is healthy!"
            else
              echo "❌ Application health check failed. Checking logs..."
              docker compose logs app
              exit 1
            fi
            
            # Clean up deployment package
            rm -f deployment.tar.gz
            
            echo "Deployment completed successfully!"
