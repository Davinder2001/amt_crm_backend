name: Deploy to Production

on:
  push:
    branches:
      - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Copy only necessary files for production
          cp -r app deployment/
          cp -r bootstrap deployment/
          cp -r config deployment/
          cp -r database deployment/
          cp -r public deployment/
          cp -r resources deployment/
          cp -r routes deployment/
          cp -r storage deployment/
          cp -r infra deployment/
          
          # Copy individual files
          cp artisan deployment/
          cp composer.json deployment/
          cp composer.lock deployment/
          cp Dockerfile deployment/
          cp docker-compose.yml deployment/
          cp package.json deployment/
          cp package-lock.json deployment/
          cp vite.config.js deployment/
          cp docker-entrypoint.sh deployment/
          
          # Create .env.docker file if it doesn't exist
          if [ ! -f ".env.docker" ]; then
            cat > deployment/.env.docker << 'EOF'
# Application Configuration
APP_NAME="AMT CRM"
APP_ENV=production
APP_KEY=base64:sCEsiEt3AiO1fKmObkwjDOEdt8FmChqfjQT7Z8hpYJs=
APP_DEBUG=false
APP_URL=https://api.himmanav.com
APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US
APP_MAINTENANCE_DRIVER=file

# PHP Configuration
PHP_CLI_SERVER_WORKERS=4
BCRYPT_ROUNDS=12

# Logging Configuration
LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=error

# Database Configuration
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=amt_crm_backend
DB_USERNAME=amt_crm_user
DB_PASSWORD=your_secure_database_password_here
DB_CHARSET=utf8mb4
DB_COLLATION=utf8mb4_unicode_ci

# Session Configuration
SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_SECURE_COOKIE=true
SESSION_HTTP_ONLY=true
SESSION_TABLE=sessions

# Cache Configuration
CACHE_STORE=database
DB_CACHE_TABLE=cache

# Queue Configuration
QUEUE_CONNECTION=database
DB_QUEUE_TABLE=jobs

# Redis Configuration
REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PORT=6379
REDIS_DB=0

# Broadcasting Configuration
BROADCAST_DRIVER=log
BROADCAST_CONNECTION=log

# Mail Configuration
MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="no-reply@himmanav.com"
MAIL_FROM_NAME="AMT CRM"

# AWS Configuration
AWS_DEFAULT_REGION=ap-south-1a
AWS_USE_PATH_STYLE_ENDPOINT=false

# Filesystem Configuration
FILESYSTEM_DISK=local

# Vite Configuration
VITE_APP_NAME="AMT CRM"
EOF
          else
            cp .env.docker deployment/
          fi
          
          # Create tar.gz for deployment
          tar -czf deployment.tar.gz -C deployment .

      - name: Copy files to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/srv/laravel-backend"
          overwrite: true

      - name: Deploy with SSH and Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd /srv/laravel-backend
            
            # Extract deployment package
            tar -xzf deployment.tar.gz
            
            # Copy environment file
            cp .env.docker .env
            
            # Stop existing containers gracefully
            docker compose down --remove-orphans
            
            # Build and start containers
            docker compose up --build -d
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            sleep 30
            
            # Check if app container is running
            if ! docker compose ps app | grep -q "Up"; then
              echo "❌ App container is not running. Checking logs..."
              docker compose logs app
              exit 1
            fi
            
            # Run migrations
            echo "Running database migrations..."
            docker compose exec -T app php artisan migrate --force
            
            # Clear and cache config for production
            echo "Caching configuration..."
            docker compose exec -T app php artisan config:cache
            docker compose exec -T app php artisan route:cache
            docker compose exec -T app php artisan view:cache
            
            # Clean up deployment package
            rm -f deployment.tar.gz
            
            echo "Deployment completed successfully!"