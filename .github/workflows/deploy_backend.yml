name: Deploy to Production

on:
  push:
    branches:
      - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_URL: ${{ secrets.APP_URL }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}

          MAIL_MAILER: ${{ secrets.MAIL_MAILER }}
          MAIL_SCHEME: ${{ secrets.MAIL_SCHEME }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_ADDRESS: ${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME: ${{ secrets.MAIL_FROM_NAME }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Copy only necessary files for production
          cp -r app deployment/
          cp -r bootstrap deployment/
          cp -r config deployment/
          cp -r database deployment/
          cp -r public deployment/
          cp -r resources deployment/
          cp -r routes deployment/
          cp -r storage deployment/
          cp -r docker deployment/
          
          # Copy individual files
          cp artisan deployment/
          cp composer.json deployment/
          cp composer.lock deployment/
          cp Dockerfile deployment/
          cp docker-compose.yml deployment/
          cp package.json deployment/
          cp package-lock.json deployment/
          cp vite.config.js deployment/
          cp docker-entrypoint.sh deployment/
          
          # Create .env.docker file from GitHub secrets
          echo "# Application Configuration" > .env.docker
          echo "APP_NAME=\"${{ secrets.APP_NAME }}\"" >> .env.docker
          echo "APP_ENV=\"${{ secrets.APP_ENV }}\"" >> .env.docker
          echo "APP_KEY=\"${{ secrets.APP_KEY }}\"" >> .env.docker
          echo "APP_DEBUG=\"${{ secrets.APP_DEBUG }}\"" >> .env.docker
          echo "APP_URL=\"${{ secrets.APP_URL }}\"" >> .env.docker
          echo "APP_LOCALE=\"${{ secrets.APP_LOCALE }}\"" >> .env.docker
          echo "APP_FALLBACK_LOCALE=\"${{ secrets.APP_FALLBACK_LOCALE }}\"" >> .env.docker
          echo "APP_FAKER_LOCALE=\"${{ secrets.APP_FAKER_LOCALE }}\"" >> .env.docker
          echo "APP_MAINTENANCE_DRIVER=\"${{ secrets.APP_MAINTENANCE_DRIVER }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# PHP Configuration" >> .env.docker
          echo "PHP_CLI_SERVER_WORKERS=\"${{ secrets.PHP_CLI_SERVER_WORKERS }}\"" >> .env.docker
          echo "BCRYPT_ROUNDS=\"${{ secrets.BCRYPT_ROUNDS }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# Logging Configuration" >> .env.docker
          echo "LOG_CHANNEL=\"${{ secrets.LOG_CHANNEL }}\"" >> .env.docker
          echo "LOG_STACK=\"${{ secrets.LOG_STACK }}\"" >> .env.docker
          echo "LOG_DEPRECATIONS_CHANNEL=\"${{ secrets.LOG_DEPRECATIONS_CHANNEL }}\"" >> .env.docker
          echo "LOG_LEVEL=\"${{ secrets.LOG_LEVEL }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# Database Configuration" >> .env.docker
          echo "DB_CONNECTION=\"${{ secrets.DB_CONNECTION }}\"" >> .env.docker
          echo "DB_HOST=\"${{ secrets.DB_HOST }}\"" >> .env.docker
          echo "DB_PORT=\"${{ secrets.DB_PORT }}\"" >> .env.docker
          echo "DB_DATABASE=\"${{ secrets.DB_DATABASE }}\"" >> .env.docker
          echo "DB_USERNAME=\"${{ secrets.DB_USERNAME }}\"" >> .env.docker
          echo "DB_PASSWORD=\"${{ secrets.DB_PASSWORD }}\"" >> .env.docker
          echo "DB_ROOT_PASSWORD=\"${{ secrets.DB_ROOT_PASSWORD }}\"" >> .env.docker
          echo "DB_CHARSET=\"${{ secrets.DB_CHARSET }}\"" >> .env.docker
          echo "DB_COLLATION=\"${{ secrets.DB_COLLATION }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# Session Configuration" >> .env.docker
          echo "SESSION_DRIVER=\"${{ secrets.SESSION_DRIVER }}\"" >> .env.docker
          echo "SESSION_LIFETIME=\"${{ secrets.SESSION_LIFETIME }}\"" >> .env.docker
          echo "SESSION_ENCRYPT=\"${{ secrets.SESSION_ENCRYPT }}\"" >> .env.docker
          echo "SESSION_PATH=\"${{ secrets.SESSION_PATH }}\"" >> .env.docker
          echo "SESSION_SECURE_COOKIE=\"${{ secrets.SESSION_SECURE_COOKIE }}\"" >> .env.docker
          echo "SESSION_HTTP_ONLY=\"${{ secrets.SESSION_HTTP_ONLY }}\"" >> .env.docker
          echo "SESSION_TABLE=\"${{ secrets.SESSION_TABLE }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# Cache Configuration" >> .env.docker
          echo "CACHE_STORE=\"${{ secrets.CACHE_STORE }}\"" >> .env.docker
          echo "DB_CACHE_TABLE=\"${{ secrets.DB_CACHE_TABLE }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# Queue Configuration" >> .env.docker
          echo "QUEUE_CONNECTION=\"${{ secrets.QUEUE_CONNECTION }}\"" >> .env.docker
          echo "DB_QUEUE_TABLE=\"${{ secrets.DB_QUEUE_TABLE }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# Broadcasting Configuration" >> .env.docker
          echo "BROADCAST_DRIVER=\"${{ secrets.BROADCAST_DRIVER }}\"" >> .env.docker
          echo "BROADCAST_CONNECTION=\"${{ secrets.BROADCAST_CONNECTION }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# Mail Configuration" >> .env.docker
          echo "MAIL_MAILER=\"${{ secrets.MAIL_MAILER }}\"" >> .env.docker
          echo "MAIL_SCHEME=\"${{ secrets.MAIL_SCHEME }}\"" >> .env.docker
          echo "MAIL_HOST=\"${{ secrets.MAIL_HOST }}\"" >> .env.docker
          echo "MAIL_PORT=\"${{ secrets.MAIL_PORT }}\"" >> .env.docker
          echo "MAIL_USERNAME=\"${{ secrets.MAIL_USERNAME }}\"" >> .env.docker
          echo "MAIL_PASSWORD=\"${{ secrets.MAIL_PASSWORD }}\"" >> .env.docker
          echo "MAIL_FROM_ADDRESS=\"${{ secrets.MAIL_FROM_ADDRESS }}\"" >> .env.docker
          echo "MAIL_FROM_NAME=\"${{ secrets.MAIL_FROM_NAME }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# AWS Configuration" >> .env.docker
          echo "AWS_DEFAULT_REGION=\"${{ secrets.AWS_DEFAULT_REGION }}\"" >> .env.docker
          echo "AWS_USE_PATH_STYLE_ENDPOINT=\"${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# Filesystem Configuration" >> .env.docker
          echo "FILESYSTEM_DISK=\"${{ secrets.FILESYSTEM_DISK }}\"" >> .env.docker
          echo "" >> .env.docker
          echo "# Vite Configuration" >> .env.docker
          echo "VITE_APP_NAME=\"${{ secrets.VITE_APP_NAME }}\"" >> .env.docker
          
          # Debug: Check the .env.docker file
          echo "=== .env.docker file contents ==="
          cat .env.docker
          echo "=== End of .env.docker file ==="
          
          # Debug: Check file encoding and line endings
          echo "=== File info ==="
          file .env.docker
          echo "=== Line count ==="
          wc -l .env.docker
          echo "=== Last few lines ==="
          tail -5 .env.docker | cat -A
          
          cp .env.docker deployment/
          
          # Create tar.gz for deployment
          tar -czf deployment.tar.gz -C deployment .

      - name: Copy files to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: root
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/srv/laravel-backend"
          overwrite: true

      - name: Deploy with SSH and Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: root
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd /srv/laravel-backend
            
            # Extract deployment package
            tar -xzf deployment.tar.gz
            
            # Copy environment file
            cp .env.docker .env
            
            # Create backup of database before deployment (if database container exists)
            if docker ps -a | grep -q amt_crm_db; then
              echo "Creating database backup before deployment..."
              docker compose exec -T db mysqldump -u root -p"${DB_ROOT_PASSWORD}" "${DB_DATABASE}" > backup_$(date +%Y%m%d_%H%M%S).sql || echo "Backup failed, continuing..."
            fi
            
            # Debug: Check the .env file on server
            echo "=== .env file contents on server ==="
            cat .env
            echo "=== End of .env file ==="
            
            # Debug: Check file encoding and line endings on server
            echo "=== File info on server ==="
            file .env
            echo "=== Line count on server ==="
            wc -l .env
            echo "=== Last few lines on server ==="
            tail -5 .env | cat -A
            
            # Stop existing containers gracefully (preserve volumes to keep database data)
            docker compose down --remove-orphans
            docker rm -f amt_crm_app amt_crm_nginx 2>/dev/null || true
            # Don't remove the database container to preserve data
            
            # Build and start containers
            docker compose up --build -d
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            sleep 30
            
            # Wait for app container to be ready (entrypoint script will handle setup)
            echo "Waiting for application to be ready..."
            sleep 60
            
            # Check if app container is running
            if ! docker compose ps app | grep -q "Up"; then
              echo "❌ App container is not running. Checking logs..."
              docker compose logs app
              exit 1
            fi
            
            # Test the application
            echo "Testing application health..."
            sleep 10
            if curl -f http://localhost/api/health > /dev/null 2>&1; then
              echo "✅ Application is healthy!"
            else
              echo "❌ Application health check failed. Checking logs..."
              docker compose logs app
              exit 1
            fi
            
            # Clean up deployment package
            rm -f deployment.tar.gz
            
            echo "Deployment completed successfully!"
