name: Deploy to Production

on:
  push:
    branches:
      - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_URL: ${{ secrets.APP_URL }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_DB: ${{ secrets.REDIS_DB }}
          MAIL_MAILER: ${{ secrets.MAIL_MAILER }}
          MAIL_SCHEME: ${{ secrets.MAIL_SCHEME }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_ADDRESS: ${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME: ${{ secrets.MAIL_FROM_NAME }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Copy only necessary files for production
          cp -r app deployment/
          cp -r bootstrap deployment/
          cp -r config deployment/
          cp -r database deployment/
          cp -r public deployment/
          cp -r resources deployment/
          cp -r routes deployment/
          cp -r storage deployment/
          # Copy individual files
          cp artisan deployment/
          cp composer.json deployment/
          cp composer.lock deployment/
          cp Dockerfile deployment/
          cp docker-compose.yml deployment/
          cp package.json deployment/
          cp package-lock.json deployment/
          cp vite.config.js deployment/
          # Only copy .env.example if needed
          cp .env.example deployment/
          
          # Create tar.gz for deployment
          tar -czf deployment.tar.gz -C deployment .

      - name: Copy files to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/srv/laravel-backend"
          overwrite: true

      - name: Deploy with SSH and Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd /srv/laravel-backend
            
            # Extract deployment package
            tar -xzf deployment.tar.gz
            
            # Copy environment file
            cp .env.docker .env
            
            # Debug: Check the .env file on server
            echo "=== .env file contents on server ==="
            cat .env
            echo "=== End of .env file ==="
            
            # Debug: Check file encoding and line endings on server
            echo "=== File info on server ==="
            file .env
            echo "=== Line count on server ==="
            wc -l .env
            echo "=== Last few lines on server ==="
            tail -5 .env | cat -A
            
            # Stop existing containers gracefully
            docker compose down --remove-orphans
            
            # Build and start containers
            docker compose up --build -d
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            sleep 30
            
            # Check if app container is running
            if ! docker compose ps app | grep -q "Up"; then
              echo "‚ùå App container is not running. Checking logs..."
              docker compose logs app
              exit 1
            fi
            
            # Run migrations
            echo "Running database migrations..."
            docker compose exec -T app php artisan migrate --force
            
            # Clear and cache config for production
            echo "Caching configuration..."
            docker compose exec -T app php artisan config:cache
            docker compose exec -T app php artisan route:cache
            docker compose exec -T app php artisan view:cache
            
            # Check SSL certificate status
            echo "Checking SSL certificate status..."
            if docker compose ps nginx-proxy-le | grep -q "Up"; then
              echo "Let's Encrypt companion is running. SSL certificates should be automatically managed."
            else
              echo "Let's Encrypt companion is not running. Starting it..."
              docker compose up -d nginx-proxy-le
            fi
            
            # Clean up deployment package
            rm -f deployment.tar.gz
            
            echo "Deployment completed successfully!"