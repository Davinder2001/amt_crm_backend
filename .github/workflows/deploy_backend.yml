name: Deploy to Production

on:
  push:
    branches:
      - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env.docker from secrets
        run: |
          touch .env.docker
          for key in $(compgen -A variable | grep -E '^(APP_|DB_|MAIL_|AWS_|LOG_|SESSION_|QUEUE_|CACHE_|REDIS_|BROADCAST_|FILESYSTEM_|VITE_|SANCTUM_|REVERB_|PHONEPE_|IMAGE_)'); do
            value="${!key}"
            # Trim leading/trailing whitespace
            value="$(echo "$value" | xargs)"
            # Only write if value is not empty
            if [ -n "$value" ]; then
              echo "$key=$value" >> .env.docker
            fi
          done
        env:
          APP_NAME: ${{ secrets.APP_NAME }}
          APP_ENV: ${{ secrets.APP_ENV }}
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_DEBUG: ${{ secrets.APP_DEBUG }}
          APP_URL: ${{ secrets.APP_URL }}
          APP_LOCALE: ${{ secrets.APP_LOCALE }}
          APP_FALLBACK_LOCALE: ${{ secrets.APP_FALLBACK_LOCALE }}
          APP_FAKER_LOCALE: ${{ secrets.APP_FAKER_LOCALE }}
          APP_MAINTENANCE_DRIVER: ${{ secrets.APP_MAINTENANCE_DRIVER }}
          APP_MAINTENANCE_STORE: ${{ secrets.APP_MAINTENANCE_STORE }}
          PHP_CLI_SERVER_WORKERS: ${{ secrets.PHP_CLI_SERVER_WORKERS }}
          BCRYPT_ROUNDS: ${{ secrets.BCRYPT_ROUNDS }}
          LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
          LOG_STACK: ${{ secrets.LOG_STACK }}
          LOG_DEPRECATIONS_CHANNEL: ${{ secrets.LOG_DEPRECATIONS_CHANNEL }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_CHARSET: ${{ secrets.DB_CHARSET }}
          DB_COLLATION: ${{ secrets.DB_COLLATION }}
          DB_FOREIGN_KEYS: ${{ secrets.DB_FOREIGN_KEYS }}
          SESSION_DRIVER: ${{ secrets.SESSION_DRIVER }}
          SESSION_LIFETIME: ${{ secrets.SESSION_LIFETIME }}
          SESSION_EXPIRE_ON_CLOSE: ${{ secrets.SESSION_EXPIRE_ON_CLOSE }}
          SESSION_ENCRYPT: ${{ secrets.SESSION_ENCRYPT }}
          SESSION_PATH: ${{ secrets.SESSION_PATH }}
          SESSION_SECURE_COOKIE: ${{ secrets.SESSION_SECURE_COOKIE }}
          SESSION_HTTP_ONLY: ${{ secrets.SESSION_HTTP_ONLY }}
          SESSION_TABLE: ${{ secrets.SESSION_TABLE }}
          CACHE_STORE: ${{ secrets.CACHE_STORE }}
          CACHE_PREFIX: ${{ secrets.CACHE_PREFIX }}
          DB_CACHE_TABLE: ${{ secrets.DB_CACHE_TABLE }}
          QUEUE_CONNECTION: ${{ secrets.QUEUE_CONNECTION }}
          QUEUE_FAILED_DRIVER: ${{ secrets.QUEUE_FAILED_DRIVER }}
          DB_QUEUE_TABLE: ${{ secrets.DB_QUEUE_TABLE }}
          DB_QUEUE: ${{ secrets.DB_QUEUE }}
          DB_QUEUE_RETRY_AFTER: ${{ secrets.DB_QUEUE_RETRY_AFTER }}
          REDIS_QUEUE_CONNECTION: ${{ secrets.REDIS_QUEUE_CONNECTION }}
          REDIS_QUEUE: ${{ secrets.REDIS_QUEUE }}
          REDIS_QUEUE_RETRY_AFTER: ${{ secrets.REDIS_QUEUE_RETRY_AFTER }}
          REDIS_CLIENT: ${{ secrets.REDIS_CLIENT }}
          REDIS_CLUSTER: ${{ secrets.REDIS_CLUSTER }}
          REDIS_PREFIX: ${{ secrets.REDIS_PREFIX }}
          REDIS_PERSISTENT: ${{ secrets.REDIS_PERSISTENT }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_DB: ${{ secrets.REDIS_DB }}
          REDIS_CACHE_DB: ${{ secrets.REDIS_CACHE_DB }}
          REDIS_TIMEOUT: ${{ secrets.REDIS_TIMEOUT }}
          BROADCAST_DRIVER: ${{ secrets.BROADCAST_DRIVER }}
          BROADCAST_CONNECTION: ${{ secrets.BROADCAST_CONNECTION }}
          MAIL_MAILER: ${{ secrets.MAIL_MAILER }}
          MAIL_SCHEME: ${{ secrets.MAIL_SCHEME }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_ADDRESS: ${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME: ${{ secrets.MAIL_FROM_NAME }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_USE_PATH_STYLE_ENDPOINT: ${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}
          FILESYSTEM_DISK: ${{ secrets.FILESYSTEM_DISK }}
          SANCTUM_STATEFUL_DOMAINS: ${{ secrets.SANCTUM_STATEFUL_DOMAINS }}
          REVERB_SERVER: ${{ secrets.REVERB_SERVER }}
          REVERB_SERVER_HOST: ${{ secrets.REVERB_SERVER_HOST }}
          REVERB_SERVER_PORT: ${{ secrets.REVERB_SERVER_PORT }}
          REVERB_HOST: ${{ secrets.REVERB_HOST }}
          REVERB_MAX_REQUEST_SIZE: ${{ secrets.REVERB_MAX_REQUEST_SIZE }}
          REVERB_SCALING_ENABLED: ${{ secrets.REVERB_SCALING_ENABLED }}
          REVERB_SCALING_CHANNEL: ${{ secrets.REVERB_SCALING_CHANNEL }}
          REVERB_PULSE_INGEST_INTERVAL: ${{ secrets.REVERB_PULSE_INGEST_INTERVAL }}
          REVERB_TELESCOPE_INGEST_INTERVAL: ${{ secrets.REVERB_TELESCOPE_INGEST_INTERVAL }}
          REVERB_APP_KEY: ${{ secrets.REVERB_APP_KEY }}
          REVERB_APP_SECRET: ${{ secrets.REVERB_APP_SECRET }}
          REVERB_APP_ID: ${{ secrets.REVERB_APP_ID }}
          REVERB_PORT: ${{ secrets.REVERB_PORT }}
          REVERB_SCHEME: ${{ secrets.REVERB_SCHEME }}
          REVERB_APP_PING_INTERVAL: ${{ secrets.REVERB_APP_PING_INTERVAL }}
          REVERB_APP_ACTIVITY_TIMEOUT: ${{ secrets.REVERB_APP_ACTIVITY_TIMEOUT }}
          REVERB_APP_MAX_MESSAGE_SIZE: ${{ secrets.REVERB_APP_MAX_MESSAGE_SIZE }}
          VITE_APP_NAME: ${{ secrets.VITE_APP_NAME }}
          VITE_REVERB_APP_KEY: ${{ secrets.VITE_REVERB_APP_KEY }}
          VITE_REVERB_HOST: ${{ secrets.VITE_REVERB_HOST }}
          VITE_REVERB_PORT: ${{ secrets.VITE_REVERB_PORT }}
          VITE_REVERB_SCHEME: ${{ secrets.VITE_REVERB_SCHEME }}
          IMAGE_URI: ${{ secrets.IMAGE_URI }}
          PHONEPE_MERCHANT_ID: ${{ secrets.PHONEPE_MERCHANT_ID }}
          PHONEPE_SALT_KEY: ${{ secrets.PHONEPE_SALT_KEY }}
          PHONEPE_SALT_INDEX: ${{ secrets.PHONEPE_SALT_INDEX }}

      - name: Create deployment package
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Copy only necessary files for production
          cp -r app deployment/
          cp -r bootstrap deployment/
          cp -r config deployment/
          cp -r database deployment/
          cp -r public deployment/
          cp -r resources deployment/
          cp -r routes deployment/
          cp -r storage deployment/
          cp -r infra deployment/
          
          # Copy individual files
          cp artisan deployment/
          cp composer.json deployment/
          cp composer.lock deployment/
          cp Dockerfile deployment/
          cp docker-compose.yml deployment/
          cp .env.docker deployment/
          cp package.json deployment/
          cp package-lock.json deployment/
          cp vite.config.js deployment/
          
          # Create tar.gz for deployment
          tar -czf deployment.tar.gz -C deployment .

      - name: Copy files to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/srv/laravel-backend"
          overwrite: true

      - name: Deploy with SSH and Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd /srv/laravel-backend
            
            # Extract deployment package
            tar -xzf deployment.tar.gz
            
            # Copy environment file
            cp .env.docker .env
            
            # Stop existing containers gracefully
            docker compose down --remove-orphans
            
            # Build and start containers
            docker compose up --build -d
            
            # Wait for database to be ready
            echo "Waiting for database to be ready..."
            sleep 30
            
            # Run migrations
            docker compose exec -T app php artisan migrate --force
            
            # Clear and cache config for production
            docker compose exec -T app php artisan config:cache
            docker compose exec -T app php artisan route:cache
            docker compose exec -T app php artisan view:cache
            
            # Clean up deployment package
            rm -f deployment.tar.gz
            
            echo "Deployment completed successfully!"