name: Deploy to Production

on:
  push:
    branches:
      - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_URL: ${{ secrets.APP_URL }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

          MAIL_MAILER: ${{ secrets.MAIL_MAILER }}
          MAIL_SCHEME: ${{ secrets.MAIL_SCHEME }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_ADDRESS: ${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME: ${{ secrets.MAIL_FROM_NAME }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Copy only necessary files for production
          cp -r app deployment/
          cp -r bootstrap deployment/
          cp -r config deployment/
          cp -r database deployment/
          cp -r public deployment/
          cp -r resources deployment/
          cp -r routes deployment/
          cp -r storage deployment/
          cp -r infra deployment/
          cp -r docker deployment/
          
          # Copy individual files
          cp artisan deployment/
          cp composer.json deployment/
          cp composer.lock deployment/
          cp Dockerfile deployment/
          cp docker-compose.yml deployment/
          cp package.json deployment/
          cp package-lock.json deployment/
          cp vite.config.js deployment/
          cp docker-entrypoint.sh deployment/
          cp create-env.sh deployment/
          
          # Create .env.docker file
          chmod +x create-env.sh
          ./create-env.sh
          
          # Debug: Check the .env.docker file
          echo "=== .env.docker file contents ==="
          cat .env.docker
          echo "=== End of .env.docker file ==="
          
          # Debug: Check file encoding and line endings
          echo "=== File info ==="
          file .env.docker
          echo "=== Line count ==="
          wc -l .env.docker
          echo "=== Last few lines ==="
          tail -5 .env.docker | cat -A
          
          cp .env.docker deployment/
          
          # Create tar.gz for deployment
          tar -czf deployment.tar.gz -C deployment .
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, bcmath, xml, curl, mysql, zip

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Run tests
        run: ./vendor/bin/pest --ci --colors=always

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install NPM dependencies
        run: npm install

      - name: Build assets
        run: npm run build

      - name: Copy files to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: root
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/srv/laravel-backend"
          overwrite: true

      - name: Deploy with SSH and Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: root
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd /srv/laravel-backend
            composer install --no-interaction --prefer-dist --optimize-autoloader
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            npm install
            npm run build
            sudo systemctl reload nginx
