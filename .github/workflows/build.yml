name: Build and Test

on:
  push:
    branches: [ production ]
  pull_request:
    branches: [ production ]

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: amt_crm_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, xml
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction

      - name: Install NPM dependencies
        run: npm ci

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Run database migrations
        run: php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: amt_crm_test
          DB_USERNAME: root
          DB_PASSWORD: root

      - name: Run tests
        run: php artisan test --coverage
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: amt_crm_test
          DB_USERNAME: root
          DB_PASSWORD: root

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse app --level=5

      - name: Run PHP CS Fixer
        run: vendor/bin/php-cs-fixer fix --dry-run --diff

  # Build Docker Image
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: amt-crm-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: |
            app/
            bootstrap/
            config/
            database/
            public/
            resources/
            routes/
            storage/
            docker/
            artisan
            composer.json
            composer.lock
            Dockerfile
            docker-compose.yml
            package.json
            package-lock.json
            vite.config.js
            docker-entrypoint.sh
          retention-days: 1

  # Security Scan
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif' 