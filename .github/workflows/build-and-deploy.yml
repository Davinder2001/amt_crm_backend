name: Build and Deploy

on:
  push:
    branches: [ production ]
  workflow_dispatch: # Allow manual triggering

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '22'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, pdo, bcmath, zip, exif, pcntl
          coverage: none
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader --no-dev

      - name: Install NPM dependencies
        run: npm ci

      - name: Create environment file from secrets
        run: |
          cat > .env << 'EOF'
          APP_NAME="${{ secrets.APP_NAME || 'AMT CRM' }}"
          APP_ENV=production
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL || 'http://localhost' }}

          LOG_CHANNEL=stack
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=error

          DB_CONNECTION=mysql
          DB_HOST=db
          DB_PORT=3306
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}

          BROADCAST_DRIVER=log
          CACHE_DRIVER=file
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync
          SESSION_DRIVER=file
          SESSION_LIFETIME=120
          EOF

      - name: Generate application key (if needed)
        run: |
          if [ -z "${{ secrets.APP_KEY }}" ]; then
            php artisan key:generate
          else
            echo "Using APP_KEY from secrets"
          fi

      - name: Run database migrations (local test)
        run: |
          echo "Skipping local migrations - will run on production server"
          echo "Database connection will be established on production deployment"

      - name: Run tests
        run: |
          if [ -f "vendor/bin/phpunit" ]; then
            php artisan test --coverage --min=80
          else
            echo "PHPUnit not found, skipping tests"
          fi
        continue-on-error: false

      - name: Run PHPStan (Static Analysis)
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            vendor/bin/phpstan analyse app --level=5 --no-progress
          else
            echo "PHPStan not found, skipping static analysis"
          fi
        continue-on-error: true

      - name: Run PHP CS Fixer (Code Style)
        run: |
          if [ -f "vendor/bin/php-cs-fixer" ]; then
            vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
          else
            echo "PHP CS Fixer not found, skipping code style check"
          fi
        continue-on-error: true

      - name: Build Docker image
        run: |
          docker build -t amt-crm-backend:latest .

      - name: Create deployment package
        run: |
          # Ensure all necessary directories exist
          mkdir -p public storage/bootstrap/cache storage/framework/cache storage/framework/sessions storage/framework/views storage/logs storage/app
          
          # Create deployment package
          tar -czf deployment.tar.gz \
            app/ \
            bootstrap/ \
            config/ \
            database/ \
            public/ \
            resources/ \
            routes/ \
            storage/ \
            vendor/ \
            docker/ \
            nginx/ \
            artisan \
            composer.json \
            composer.lock \
            Dockerfile \
            Dockerfile.nginx \
            docker-compose.yml \
            package.json \
            package-lock.json \
            vite.config.js \
            docker-entrypoint.sh \
            docker-entrypoint-nginx.sh \
            .env.example
          
          # Verify the package was created
          if [ -f "deployment.tar.gz" ]; then
            echo "✅ Deployment package created successfully"
            ls -lh deployment.tar.gz
            
            # Verify critical files are in the package
            echo "🔍 Verifying critical files in deployment package..."
            if tar -tzf deployment.tar.gz | grep -q "docker-entrypoint-nginx.sh"; then
              echo "✅ docker-entrypoint-nginx.sh found in package"
            else
              echo "❌ docker-entrypoint-nginx.sh missing from package!"
              exit 1
            fi
            
            if tar -tzf deployment.tar.gz | grep -q "nginx/nginx.combined.conf"; then
              echo "✅ nginx/nginx.combined.conf found in package"
            else
              echo "❌ nginx/nginx.combined.conf missing from package!"
              exit 1
            fi
            
            if tar -tzf deployment.tar.gz | grep -q "Dockerfile.nginx"; then
              echo "✅ Dockerfile.nginx found in package"
            else
              echo "❌ Dockerfile.nginx missing from package!"
              exit 1
            fi
          else
            echo "❌ Failed to create deployment package"
            exit 1
          fi

      - name: Test SSH connectivity
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER || 'root' }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          timeout: 60s
          debug: true
          script: |
            echo "✅ SSH connection successful!"
            echo "🖥️  Server info:"
            whoami
            pwd
            uname -a
            echo "📁 Target directory:"
            ls -la /srv/ || sudo mkdir -p /srv/laravel-backend
            echo "🐳 Docker status:"
            docker --version || echo "Docker not found"

      - name: Copy deployment package to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER || 'root' }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/srv"
          overwrite: true
          timeout: 300s
          debug: true
          use_insecure_cipher: false
          rm: false

      - name: Deploy on server (atomic, idempotent)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER || 'root' }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          timeout: 600s
          debug: true
          use_insecure_cipher: false
          script: |
            set -e
            
            # Create new directory structure
            echo "🏗️ Creating new directory structure..."
            mkdir -p /srv/amt_crm_backend
            mkdir -p /srv/amt_crm_nginx
            mkdir -p /srv/amt_crm_db
            
            # Extract deployment package to backend directory
            cd /srv/amt_crm_backend
            tar -xzf /srv/deployment.tar.gz
            
            # Create production .env file from secrets
            echo "🔧 Creating production environment file..."
            cat > .env << 'EOF'
            # Application Configuration
            APP_NAME="AMT CRM"
            APP_ENV=production
            APP_KEY=${{ secrets.APP_KEY }}
            APP_DEBUG=false
            APP_URL=${{ secrets.APP_URL }}
            APP_LOCALE=en
            APP_FALLBACK_LOCALE=en
            APP_FAKER_LOCALE=en_US
            APP_MAINTENANCE_DRIVER=file

            # PHP Configuration
            PHP_CLI_SERVER_WORKERS=4
            BCRYPT_ROUNDS=12

            # Logging Configuration
            LOG_CHANNEL=stack
            LOG_STACK=single
            LOG_DEPRECATIONS_CHANNEL=null
            LOG_LEVEL=error

            # Database Configuration
            DB_CONNECTION=mysql
            DB_HOST=db
            DB_PORT=3306
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            DB_CHARSET=utf8mb4
            DB_COLLATION=utf8mb4_unicode_ci

            # Session Configuration
            SESSION_DRIVER=file
            SESSION_LIFETIME=120
            SESSION_ENCRYPT=false
            SESSION_PATH=/
            SESSION_SECURE_COOKIE=true
            SESSION_HTTP_ONLY=true

            # Cache Configuration
            CACHE_DRIVER=file
            FILESYSTEM_DISK=local

            # Vite Configuration
            VITE_APP_NAME="AMT CRM"
            EOF

            # Backup current .env if it exists
            if [ -f ".env.backup" ]; then
              cp .env.backup .env.backup.$(date +%Y%m%d_%H%M%S)
            fi
            
            # Create backup of new .env
            cp .env .env.backup

            # Move nginx config to nginx directory
            echo "📁 Setting up nginx configuration..."
            if [ -f "nginx/nginx.combined.conf" ]; then
              cp nginx/nginx.combined.conf /srv/amt_crm_nginx/nginx.conf
              echo "✅ nginx.conf copied successfully"
            else
              echo "❌ nginx/nginx.combined.conf not found!"
              exit 1
            fi
            
            if [ -f "docker-entrypoint-nginx.sh" ]; then
              cp docker-entrypoint-nginx.sh /srv/amt_crm_nginx/
              chmod +x /srv/amt_crm_nginx/docker-entrypoint-nginx.sh
              echo "✅ docker-entrypoint-nginx.sh copied successfully"
            else
              echo "❌ docker-entrypoint-nginx.sh not found!"
              exit 1
            fi
            
            # Create shared external network
            echo "🌐 Creating shared external network..."
            docker network create amt_crm_shared_network 2>/dev/null || echo "Network already exists"
            
            # Create docker-compose.yml in root /srv directory
            echo "🐳 Creating main docker-compose.yml..."
            cat > /srv/docker-compose.yml << 'EOF'
            version: '3.8'

            services:
              app:
                build: ./amt_crm_backend
                container_name: amt_crm_app
                restart: unless-stopped
                volumes:
                  - app_storage:/var/www/storage
                  - app_cache:/var/www/bootstrap/cache
                environment:
                  - APP_ENV=production
                  - APP_DEBUG=false
                  - DB_HOST=db
                  - CACHE_DRIVER=file
                  - SESSION_DRIVER=file
                  - QUEUE_CONNECTION=sync
                env_file:
                  - ./amt_crm_backend/.env
                depends_on:
                  db:
                    condition: service_healthy
                networks:
                  - amt_crm_shared_network
                healthcheck:
                  test: ["CMD", "ps", "aux", "|", "grep", "php-fpm", "|", "grep", "-v", "grep"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 60s
                security_opt:
                  - no-new-privileges:true

              db:
                image: mysql:8.0
                container_name: amt_crm_db
                restart: unless-stopped
                environment:
                  MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
                  MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}
                  MYSQL_USER: ${{ secrets.DB_USERNAME }}
                  MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
                  MYSQL_INITDB_SKIP_TZINFO: 1
                volumes:
                  - db_data:/var/lib/mysql
                  - ./amt_crm_db/init:/docker-entrypoint-initdb.d
                networks:
                  - amt_crm_shared_network
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                  timeout: 20s
                  retries: 10
                  start_period: 30s
                security_opt:
                  - no-new-privileges:true

              nginx:
                build:
                  context: ./amt_crm_backend
                  dockerfile: Dockerfile.nginx
                container_name: amt_crm_nginx
                restart: unless-stopped
                ports:
                  - "80:80"
                volumes:
                  - ./amt_crm_nginx/nginx.conf:/etc/nginx/nginx.conf:ro
                  - ./amt_crm_nginx/docker-entrypoint-nginx.sh:/docker-entrypoint-nginx.sh:ro
                  - nginx_logs:/var/log/nginx
                  - app_storage:/var/www/storage:ro
                networks:
                  - amt_crm_shared_network
                depends_on:
                  app:
                    condition: service_healthy
                security_opt:
                  - no-new-privileges:true

            volumes:
              db_data:
                driver: local
              app_storage:
                driver: local
              app_cache:
                driver: local
              nginx_logs:
                driver: local

            networks:
              amt_crm_shared_network:
                external: true
                name: amt_crm_shared_network
            EOF
            
            # Check if containers exist and are running
            DB_EXISTS=$(docker ps -a --format '{{.Names}}' | grep -c '^amt_crm_db$' || true)
            NGINX_EXISTS=$(docker ps -a --format '{{.Names}}' | grep -c '^amt_crm_nginx$' || true)

            # If first deploy (db/nginx not running), bring up all
            if [ "$DB_EXISTS" -eq 0 ] || [ "$NGINX_EXISTS" -eq 0 ]; then
              echo "🚀 First deploy: starting all containers (db, nginx, app)"
              cd /srv
              docker compose up --build -d
            else
              echo "🔄 Subsequent deploy: only updating app container"
              
              # Graceful shutdown of app container
              cd /srv
              docker compose stop app || true
              docker rm -f amt_crm_app 2>/dev/null || true
              
              # Start new app container
              docker compose up --build -d app
            fi

            # Wait for containers to be ready
            echo "⏳ Waiting for containers to be ready..."
            sleep 10
            
            # Check container status
            cd /srv
            docker compose ps

            # Fix permissions for Laravel
            echo "🔧 Fixing Laravel permissions..."
            docker compose exec --user root app chown -R www:www /var/www/storage /var/www/bootstrap/cache || true
            docker compose exec --user root app chmod -R 775 /var/www/storage /var/www/bootstrap/cache || true

            # Run Laravel optimizations
            echo "⚡ Running Laravel optimizations..."
            docker compose exec app php artisan config:cache || true
            docker compose exec app php artisan view:cache || true
            docker compose exec app php artisan optimize || true
            # Skip route cache for now due to compatibility issues
            echo "⚠️  Skipping route cache due to compatibility"
            
            # Run migrations if needed
            echo "🗄️  Running database migrations..."
            docker compose exec app php artisan migrate --force --no-interaction || echo "⚠️  Migration failed, but continuing..."
            
            # Handle any pending migrations that might already have tables
            echo "🔧 Checking for migration state issues..."
            docker compose exec app php artisan migrate:status --pending | grep -q . && echo "⚠️  Found pending migrations, attempting to resolve..." || echo "✅ No pending migrations"

            # Wait for app to be fully ready
            echo "⏳ Waiting for app to be ready..."
            sleep 30

            # Optional health check (non-blocking)
            echo "🏥 Performing optional health check..."
              if curl -f -s -m 10 http://localhost/health > /dev/null; then
              echo "✅ Health check passed"
              else
              echo "⚠️  Health check failed, but continuing deployment..."
              echo "📋 Container logs for debugging:"
              docker compose logs app --tail=20 || true
              docker compose logs nginx --tail=10 || true
              fi

            # Cleanup
            echo "🧹 Cleaning up..."
            rm -f /srv/deployment.tar.gz
            
            # Remove old backups (keep last 5)
            cd /srv/amt_crm_backend
            ls -t .env.backup.* 2>/dev/null | tail -n +6 | xargs -r rm -f
            
            # Show final directory structure
            echo "📁 Final directory structure:"
            ls -la /srv/
            echo "📁 Backend structure:"
            ls -la /srv/amt_crm_backend/
            echo "📁 Nginx structure:"
            ls -la /srv/amt_crm_nginx/
            echo "📁 Database structure:"
            ls -la /srv/amt_crm_db/
            
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application is available at: ${{ secrets.APP_URL }}"

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📊 Deployment Summary:"
          echo "- Repository: ${{ github.repository }}"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Environment: Production"
          echo "- URL: ${{ secrets.APP_URL || 'http://your-domain.com' }}"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔍 Check the logs above for details."
          echo "📊 Failure Summary:"
          echo "- Repository: ${{ github.repository }}"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Environment: Production" 