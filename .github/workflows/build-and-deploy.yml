name: Build and Deploy

on:
  push:
    branches: [ production ]
  workflow_dispatch: # Allow manual triggering

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, pdo, bcmath, zip
          coverage: none
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader --no-dev

      - name: Install NPM dependencies
        run: npm ci

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Run database migrations (local test)
        run: php artisan migrate --force
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'

      - name: Run tests
        run: |
          if [ -f "vendor/bin/phpunit" ]; then
            php artisan test --coverage --min=80
          else
            echo "PHPUnit not found, skipping tests"
          fi
        continue-on-error: false

      - name: Run PHPStan (Static Analysis)
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            vendor/bin/phpstan analyse app --level=5 --no-progress
          else
            echo "PHPStan not found, skipping static analysis"
          fi
        continue-on-error: true

      - name: Run PHP CS Fixer (Code Style)
        run: |
          if [ -f "vendor/bin/php-cs-fixer" ]; then
            vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
          else
            echo "PHP CS Fixer not found, skipping code style check"
          fi
        continue-on-error: true

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: amt-crm-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create deployment package
        run: |
          tar -czf deployment.tar.gz \
            app/ \
            bootstrap/ \
            config/ \
            database/ \
            public/ \
            resources/ \
            routes/ \
            storage/ \
            docker/ \
            artisan \
            composer.json \
            composer.lock \
            Dockerfile \
            docker-compose.yml \
            package.json \
            package-lock.json \
            vite.config.js \
            docker-entrypoint.sh \
            .env.example

      - name: Copy deployment package to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER || 'root' }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/srv/laravel-backend"
          overwrite: true
          timeout: 300s

      - name: Deploy on server (atomic, idempotent)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER || 'root' }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          timeout: 600s
          script: |
            set -e
            cd /srv/laravel-backend
            
            # Extract deployment package
            tar -xzf deployment.tar.gz
            
            # Create production .env file from secrets
            echo "🔧 Creating production environment file..."
            cat > .env << 'EOF'
            APP_NAME="${{ secrets.APP_NAME || 'AMT CRM' }}"
            APP_ENV=production
            APP_KEY=${{ secrets.APP_KEY }}
            APP_DEBUG=false
            APP_URL=${{ secrets.APP_URL || 'http://localhost' }}

            LOG_CHANNEL=stack
            LOG_DEPRECATIONS_CHANNEL=null
            LOG_LEVEL=debug

            DB_CONNECTION=mysql
            DB_HOST=${{ secrets.DB_HOST || 'host.docker.internal' }}
            DB_PORT=${{ secrets.DB_PORT || '3306' }}
            DB_DATABASE=${{ secrets.DB_DATABASE }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            BROADCAST_DRIVER=log
            CACHE_DRIVER=file
            FILESYSTEM_DISK=local
            QUEUE_CONNECTION=sync
            SESSION_DRIVER=file
            SESSION_LIFETIME=120

            MEMCACHED_HOST=127.0.0.1

            REDIS_HOST=127.0.0.1
            REDIS_PASSWORD=null
            REDIS_PORT=6379

            MAIL_MAILER=${{ secrets.MAIL_MAILER || 'smtp' }}
            MAIL_HOST=${{ secrets.MAIL_HOST }}
            MAIL_PORT=${{ secrets.MAIL_PORT || '587' }}
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION || 'tls' }}
            MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
            MAIL_FROM_NAME="${{ secrets.MAIL_FROM_NAME || secrets.APP_NAME || 'AMT CRM' }}"

            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
            AWS_BUCKET=${{ secrets.AWS_BUCKET }}
            AWS_USE_PATH_STYLE_ENDPOINT=false

            PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID }}
            PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY }}
            PUSHER_APP_SECRET=${{ secrets.PUSHER_APP_SECRET }}
            PUSHER_HOST=${{ secrets.PUSHER_HOST }}
            PUSHER_PORT=${{ secrets.PUSHER_PORT || '443' }}
            PUSHER_SCHEME=${{ secrets.PUSHER_SCHEME || 'https' }}
            PUSHER_APP_CLUSTER=${{ secrets.PUSHER_APP_CLUSTER || 'mt1' }}

            VITE_APP_NAME="${{ secrets.APP_NAME || 'AMT CRM' }}"
            VITE_PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY }}
            VITE_PUSHER_HOST=${{ secrets.PUSHER_HOST }}
            VITE_PUSHER_PORT=${{ secrets.PUSHER_PORT || '443' }}
            VITE_PUSHER_SCHEME=${{ secrets.PUSHER_SCHEME || 'https' }}
            VITE_PUSHER_APP_CLUSTER=${{ secrets.PUSHER_APP_CLUSTER || 'mt1' }}

            # PhonePe Payment Gateway
            PHONEPE_MERCHANT_ID=${{ secrets.PHONEPE_MERCHANT_ID }}
            PHONEPE_SALT_KEY=${{ secrets.PHONEPE_SALT_KEY }}
            PHONEPE_SALT_INDEX=${{ secrets.PHONEPE_SALT_INDEX }}
            PHONEPE_CLIENT_ID=${{ secrets.PHONEPE_CLIENT_ID }}
            PHONEPE_CLIENT_SECRET=${{ secrets.PHONEPE_CLIENT_SECRET }}
            PHONEPE_CLIENT_VERSION=${{ secrets.PHONEPE_CLIENT_VERSION }}
            PHONEPE_GRANT_TYPE=${{ secrets.PHONEPE_GRANT_TYPE }}
            PHONEPE_OAUTH_URL=${{ secrets.PHONEPE_OAUTH_URL }}
            PHONEPE_CHECKOUT_URL=${{ secrets.PHONEPE_CHECKOUT_URL }}
            PHONEPE_STATUS_URL=${{ secrets.PHONEPE_STATUS_URL }}
            PHONEPE_CALLBACK_BASE_URL=${{ secrets.PHONEPE_CALLBACK_BASE_URL }}
            PHONEPE_CALLBACK_BASE_URL_COMPANY=${{ secrets.PHONEPE_CALLBACK_BASE_URL_COMPANY }}
            PHONEPE_CALLBACK_BASE_URL_PROD=${{ secrets.PHONEPE_CALLBACK_BASE_URL_PROD }}
            PHONEPE_CALLBACK_BASE_URL_COMPANY_PROD=${{ secrets.PHONEPE_CALLBACK_BASE_URL_COMPANY_PROD }}

            # WhatsApp/SMS Configuration
            MSG91_AUTH_KEY=${{ secrets.MSG91_AUTH_KEY }}
            MSG91_SENDER_ID=${{ secrets.MSG91_SENDER_ID }}
            MSG91_ROUTE=${{ secrets.MSG91_ROUTE }}

            # JWT Configuration
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_ALGO=${{ secrets.JWT_ALGO || 'HS256' }}

            # Additional Configuration
            SANCTUM_STATEFUL_DOMAINS=${{ secrets.SANCTUM_STATEFUL_DOMAINS }}
            SESSION_DOMAIN=${{ secrets.SESSION_DOMAIN }}
            
            # Image/File Storage
            IMAGE_URI=${{ secrets.IMAGE_URI || secrets.APP_URL }}
            FILESYSTEM_DRIVER=${{ secrets.FILESYSTEM_DRIVER || 'local' }}
            EOF

            # Backup current .env if it exists
            if [ -f ".env.backup" ]; then
              cp .env.backup .env.backup.$(date +%Y%m%d_%H%M%S)
            fi
            
            # Create backup of new .env
            cp .env .env.backup

            # Check if db and nginx containers exist and are running
            DB_EXISTS=$(docker ps -a --format '{{.Names}}' | grep -c '^amt_crm_db$' || true)
            NGINX_EXISTS=$(docker ps -a --format '{{.Names}}' | grep -c '^amt_crm_nginx$' || true)

            # If first deploy (db/nginx not running), bring up all
            if [ "$DB_EXISTS" -eq 0 ] || [ "$NGINX_EXISTS" -eq 0 ]; then
              echo "🚀 First deploy: starting all containers (db, nginx, app)"
              docker compose up --build -d
            else
              echo "🔄 Subsequent deploy: only updating app container"
              
              # Graceful shutdown of app container
              docker compose stop app || true
              docker rm -f amt_crm_app 2>/dev/null || true
              
              # Start new app container
              docker compose up --build -d app
            fi

            # Wait for containers to be ready
            echo "⏳ Waiting for containers to be ready..."
            sleep 10
            
            # Check container status
            docker compose ps

            # Fix permissions for Laravel
            echo "🔧 Fixing Laravel permissions..."
            docker compose exec --user root app chown -R www:www /var/www/storage /var/www/bootstrap/cache || true
            docker compose exec --user root app chmod -R 775 /var/www/storage /var/www/bootstrap/cache || true

            # Run Laravel optimizations
            echo "⚡ Running Laravel optimizations..."
            docker compose exec app php artisan config:cache || true
            docker compose exec app php artisan route:cache || true
            docker compose exec app php artisan view:cache || true
            
            # Run migrations if needed
            echo "🗄️  Running database migrations..."
            docker compose exec app php artisan migrate --force || true

            # Wait for app to be fully ready
            echo "⏳ Waiting for app to be ready..."
            sleep 30

            # Health check with retry logic
            echo "🏥 Performing health check..."
            for i in {1..5}; do
              if docker compose exec nginx curl -f -s http://localhost/health; then
                echo "✅ Health check passed on attempt $i"
                break
              else
                echo "❌ Health check failed on attempt $i"
                if [ $i -eq 5 ]; then
                  echo "🚨 Health check failed after 5 attempts. Checking logs..."
                  docker compose logs app --tail=50
                  docker compose logs nginx --tail=20
                  exit 1
                fi
                sleep 10
              fi
            done

            # Cleanup
            echo "🧹 Cleaning up..."
            rm -f deployment.tar.gz
            
            # Remove old backups (keep last 5)
            ls -t .env.backup.* 2>/dev/null | tail -n +6 | xargs -r rm -f
            
            echo "✅ Deployment completed successfully!"
            echo "🌐 Application is available at: ${{ secrets.APP_URL || 'http://your-domain.com' }}"

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📊 Deployment Summary:"
          echo "- Repository: ${{ github.repository }}"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Environment: Production"
          echo "- URL: ${{ secrets.APP_URL || 'http://your-domain.com' }}"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔍 Check the logs above for details."
          echo "📊 Failure Summary:"
          echo "- Repository: ${{ github.repository }}"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Environment: Production" 