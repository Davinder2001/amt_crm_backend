<?php

namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\File;
use App\Models\Item;
use App\Services\OcrParsingService;
use App\Models\Category;
use App\Services\SelectedCompanyService;


class ProductOcrController extends Controller
{

    
    public function scanAndSaveText(Request $request, OcrParsingService $ocr)
    {
        $validator = Validator::make($request->all(), [
            'image' => 'required|mimes:jpg,jpeg,png,bmp,pdf|max:5120',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status'  => false,
                'message' => 'Validation failed',
                'errors'  => $validator->errors(),
            ], 422);
        }

        File::ensureDirectoryExists(public_path('ocr_uploads'));

        $file = $request->file('image');
        $fileName = uniqid('ocr_', true) . '.' . $file->getClientOriginalExtension();
        $filePath = public_path('ocr_uploads/' . $fileName);
        $file->move(public_path('ocr_uploads'), $fileName);

        try {
            $rawText = $ocr->extractText($filePath, $file->getClientOriginalExtension());
        } catch (\Throwable $e) {
            File::delete($filePath);
            return response()->json([
                'status'  => false,
                'message' => 'Failed to parse file.',
                'error'   => $e->getMessage(),
            ], 500);
        }

        $parsedBy = 'gpt';
        $extractedItems = $ocr->parseWithGpt($rawText);

        // if (!is_array($extractedItems) || count($extractedItems) === 0 || !isset($extractedItems[0]['name'])) {
        //     $parsedBy = 'manual';
        //     $extractedItems = $ocr->parseManually($rawText);
        // }

        $grandTotal = 0;
        foreach ($extractedItems as &$item) {
            $qty = (int)($item['quantity'] ?? 0);
            $price = (float)($item['price'] ?? 0);
            $item['sub_total'] = $qty * $price;
            $grandTotal += $item['sub_total'];
        }

        File::delete($filePath);

        if (empty($extractedItems)) {
            return response()->json([
                'status'    => false,
                'message'   => 'No valid product data found in the file.',
                'raw_text'  => $rawText,
            ], 422);
        }

        return response()->json([
            'status'      => true,
            'message'     => $parsedBy === 'gpt' ? 'Generated by GPT' : 'Generated manually',
            'ocr_text'    => $rawText,
            'products'    => $extractedItems,
            'grand_total' => $grandTotal,
        ]);
    }


    /**
     * Store the scanned products in the database.
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'products'              => 'required|array|min:1',
            'products.*.name'       => 'required|string',
            'products.*.quantity'   => 'required|integer|min:1',
            'products.*.price'      => 'required|numeric|min:0',
            'tax_id'                => 'nullable|integer|exists:taxes,id',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status'    => false,
                'message'   => 'Validation failed',
                'errors'    => $validator->errors(),
            ], 422);
        }

        $products           = $request->input('products');
        $taxId              = $request->input('tax_id', 0);
        $selectedCompany    = SelectedCompanyService::getSelectedCompanyOrFail();
        $lastItemCode       = Item::where('company_id', $selectedCompany->id)->max('item_code') ?? 0;

        $uncategorizedCategory = Category::firstOrCreate([
            'company_id' => $selectedCompany->id,
            'name' => 'Uncategorized',
        ]);

        $savedItems = [];

        foreach ($products as $product) {
            $lastItemCode++;

            $item = Item::create([
                'company_id'     => $selectedCompany->id,
                'item_code'      => $lastItemCode,
                'name'           => $product['name'],
                'quantity_count' => $product['quantity'],
                'price'          => $product['price'],
            ]);

            if ($taxId > 0) {
                $item->taxes()->attach($taxId);
            }

            $item->categories()->attach($uncategorizedCategory->id);
            $savedItems[] = $item;
        }

        return response()->json([
            'status' => true,
            'message' => 'Products saved successfully.',
            'items' => $savedItems,
        ], 201);
    }
}
